'''
Reward delivery features
'''

import time
from riglib.experiment import traits
import numpy as np
import serial.tools.list_ports
import pyfirmata
#import comedi
import threading

class GPIO(object):

    def write(self, pin: int, value: bool):
        pass

    def read(self, pin: int) -> bool:
        pass

class NiGPIO(GPIO):

    def __init__(self):
        self.com = comedi.comedi_open('/dev/comedi0')

    def write(self, pin, value):
        pass

    def read(self, pin):
        pass

class ArduinoGPIO(GPIO):
    ''' Pin-addressable arduino serial interface'''
    def __init__(self, port=None, baudrate=500000, timeout=10):
        if port is None:
            ports = serial.tools.list_ports.comports()
            for p in ports:
                if 'USB' in p.description:
                    port = p.device
            if port is None:
                raise Exception('No serial device found')
        self.arduino = pyfirmata.Arduino(port, baudrate=baudrate, timeout=timeout)

    def write(self, pin, value):
        return self.arduino.digital[pin].write(int(value))
    
    def read(self, pin):
        return bool(self.arduino.digital[pin].read())

    def close(self):
        ''' Call this method before destroying the object'''
        self.arduino.exit()

class DigitalWave(threading.Thread):
    ''' Logic-level waves generated by a single GPIO pin'''
    def __init__(self, gpio, pin=8):
        self.gpio = gpio
        self.pin = pin
        self.edges = np.zeros(0)
        self.first_edge = True # Note, this doesn't affect the previous laser state
        threading.Thread.__init__(self)

    def set_const(self, value: bool):
        self.first_edge = value
        self.edges = [0]

    def set_pulse(self, duration):
        self.first_edge = True
        self.edges = [0, duration]

    def set_square_wave(self, freq, duration):
        interval = 1.0/freq
        length = int(duration/interval)
        delays = np.insert(interval*np.ones(length), 0, 1)
        self.first_edge = True
        self.edges = DigitalWave.delays_to_edges(delays)
    
    def set_sequence(self, sequence, first_edge):
        self.first_edge = first_edge
        self.edges = DigitalWave.delays_to_edges(sequence)

    def run(self):
        ''' Generate square pulses defined by edges (in seconds). First edge is always an onset'''
        t0 = time.perf_counter()
        state = self.first_edge 
        for edge in self.edges:
            while (time.perf_counter() - t0 < edge):
                pass
            self.gpio.write(self.pin, state)
            state = not state

    @staticmethod
    def delays_to_edges(delays):
        edges = np.zeros(len(delays))
        t = 0
        for i in range(0,len(delays)):
            t += delays[i]
            edges[i] = t
        return edges

def get_methods(contains=''): 
    return [method_name for method_name in dir(object)
        if callable(getattr(object, method_name)) and contains in method_name]

class LaserTrials(traits.HasTraits):
    ''' Activate a laser during the experiment'''

    laser_serial_port = traits.Str(desc="Serial port used to communicate with arduino")
    laser_gpio_pin = traits.Int(13, desc="Pin number for laser")
    laser_wave = traits.Enum(("Constant", "Pulse", "Square wave", "Sequence"), desc="Laser wave type")
    laser_first_edge = traits.Bool(True, desc="Laser first edge")
    laser_duration = traits.Float(desc="Laser duration (seconds)")
    laser_freq = traits.Float(desc="Laser frequency (Hz)")
    laser_sequence = traits.Str(desc="Arbitrary comma separated list of laser delays")

    def __init__(self, *args, **kwargs):
        self.gpio = ArduinoGPIO(port=self.laser_serial_port)
        super(LaserTrials, self).__init__(*args, **kwargs)

    def _start_trial(self):
        laser = DigitalWave(self.gpio, pin=self.laser_gpio_pin)
        if self.laser_wave == "Constant":
            laser.set_const(self.laser_first_edge)
            self.laser_duration = 0
        elif self.laser_wave == "Pulse":
            laser.set_pulse(self.laser_duration)
        elif self.laser_wave == "Square wave":
            laser.set_square_wave(self.laser_freq, self.laser_duration)
        elif self.laser_wave == "Sequence":
            seq = [int(i) for i in self.laser_sequence.split(",")]
            laser.set_sequence(seq, self.first_edge)
            self.laser_duration = laser.edges[-1]
        laser.start()
        super(LaserTrials, self)._start_trial()
