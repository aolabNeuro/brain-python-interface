'''
Laser delivery features
'''

import time
from riglib.experiment import traits
import numpy as np
import threading


class DigitalWave(threading.Thread):
    ''' Logic-level waves generated by a single GPIO pin'''

    def __init__(self, gpio, pin=8):
        self.gpio = gpio
        self.pin = pin
        self.edges = np.zeros(0)
        self.first_edge = True # Note, this doesn't affect the previous laser state
        threading.Thread.__init__(self)
    
    def set_edges(self, edges, first_edge):
        self.edges = edges
        self.first_edge = first_edge

    def set_pulse(self, duration, first_edge):
        self.set_edges([0, duration], first_edge)

    def set_square_wave(self, freq, duration, first_edge=True):
        edges = DigitalWave.square_wave(freq, duration)
        self.set_edges(edges, first_edge)

    def run(self):
        ''' Generate square pulses defined by edges (in seconds)'''
        t0 = time.perf_counter()
        state = self.first_edge 
        for edge in self.edges:
            while (time.perf_counter() - t0 < edge):
                pass
            self.gpio.write(self.pin, state)
            state = not state

    @staticmethod
    def delays_to_edges(delays):
        edges = np.zeros(len(delays))
        t = 0
        for i in range(0,len(delays)):
            t += delays[i]
            edges[i] = t
        return edges

    @staticmethod
    def square_wave(freq, duration):
        pulse_interval = 1.0/freq
        edge_interval = pulse_interval/2
        length = int(duration/edge_interval)
        delays = np.insert(edge_interval*np.ones(length), 0, 0)
        return DigitalWave.delays_to_edges(delays)

class LaserTrials(traits.HasTraits):
    ''' Activate a laser during the experiment'''

    laser_serial_port = traits.Str(desc="Serial port used to communicate with arduino")
    laser_gpio_pin = traits.Int(13, desc="Pin number for laser")
    laser_wave = traits.OptionsList(("Constant", "Pulse", "Square wave"), desc="Laser wave type")
    laser_first_edge = traits.Bool(True, desc="Laser first edge")
    laser_duration = traits.Float(desc="Laser duration (seconds)")
    laser_freq = traits.Float(desc="Laser frequency (Hz)")

    def __init__(self, *args, **kwargs):
        # gpio must be already defined elsewhere
        #self.gpio = GPIO()
        #self.gpio = ArduinoGPIO(port=self.laser_serial_port)
        super(LaserTrials, self).__init__(*args, **kwargs)

    def _start_trial(self):
        laser = DigitalWave(self.gpio, pin=self.laser_gpio_pin)
        if self.laser_wave == "Constant":
            edges = [0]
            self.laser_duration = 0
        elif self.laser_wave == "Pulse":
            edges = [0, self.laser_duration]
        elif self.laser_wave == "Square wave":
            edges = DigitalWave.square_wave(self.laser_freq, self.laser_duration)
        laser.set_edges(edges, self.laser_first_edge)
        laser.start()
        super(LaserTrials, self)._start_trial()
